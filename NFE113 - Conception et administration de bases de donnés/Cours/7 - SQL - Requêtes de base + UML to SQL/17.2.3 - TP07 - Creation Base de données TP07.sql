
DROP TABLE If EXISTS ABONNEMENT;
DROP TABLE If EXISTS BIBLIOTHEQUE;
DROP TABLE If EXISTS EMPRUNT;
DROP TABLE If EXISTS EXEMPLAIRE;
DROP TABLE If EXISTS CARACTERISATION;
DROP TABLE If EXISTS MOT_CLEF;
DROP TABLE If EXISTS LIVRETRADUIT;
DROP TABLE If EXISTS LIVREORIGINAL;
DROP TABLE If EXISTS LIVRE;
DROP TABLE If EXISTS DOMICILIATION;
DROP TABLE If EXISTS VILLE;
DROP TABLE If EXISTS ABONNE;
DROP TABLE If EXISTS HABITANT;
DROP TABLE If EXISTS PERSONNEPHYSIQUE;









/* Hiérarchie Personne Physique *****************************************************************************/
CREATE TABLE PERSONNEPHYSIQUE(
	IDPERSONNEPHYSIQUE SERIAL,
	NOM VARCHAR(20) NOT NULL,
	PRENOM VARCHAR(20),
	AGE INTEGER,
	CONSTRAINT PERSONNEPHYSIQUE_PK PRIMARY KEY (IDPERSONNEPHYSIQUE),
	CONSTRAINT AGE_DK CHECK (AGE BETWEEN 0 AND 120)
);





CREATE TABLE HABITANT(
) INHERITS(PERSONNEPHYSIQUE);





CREATE TABLE ABONNE(
) INHERITS(HABITANT);
/* Hiérarchie Personne Physique *****************************************************************************/










/* Ville ****************************************************************************************************/
CREATE TABLE VILLE(
	IDVILLE SERIAL,
	NOM VARCHAR(20) NOT NULL,
	CONSTRAINT VILLE_PK PRIMARY KEY (IDVILLE)
);





CREATE TABLE DOMICILIATION(
	IDVILLE INTEGER,
	IDPERSONNEPHYSIQUE INTEGER,
	CONSTRAINT DOMICILIATION_PK PRIMARY KEY (IDVILLE, IDPERSONNEPHYSIQUE),
	CONSTRAINT DOMICILIATIONTOVILLE_FK FOREIGN KEY (IDVILLE) REFERENCES VILLE(IDVILLE)
--	Remplacer cette contrainte par un trigger
--	CONSTRAINT DOMICILIATIONTOHABITANT_FK FOREIGN KEY (IDPERSONNEPHYSIQUE) REFERENCES HABITANT(IDPERSONNEPHYSIQUE)
);
/* Ville ****************************************************************************************************/










/* Hiérarchie Livre *****************************************************************************************/
CREATE TABLE LIVRE(
	IDLIVRE SERIAL,
	ISBN VARCHAR(20),
	TITRE VARCHAR(50) NOT NULL,
	LANGUE VARCHAR(15) CHECK (LANGUE IN ('FR', 'BR', 'SP')),
	CONSTRAINT LIVRE_PK PRIMARY KEY (IDLIVRE)
);





CREATE TABLE LIVREORIGINAL(
	SIECLE INTEGER CHECK (SIECLE BETWEEN 0 AND 21),
	CATEGORIE VARCHAR(20)
) INHERITS(LIVRE);





CREATE TABLE LIVRETRADUIT(
	IDLIVREORIGINAL INTEGER
) INHERITS(LIVRE);





CREATE OR REPLACE FUNCTION "mir_livreTableAbstraite"() RETURNS TRIGGER
LANGUAGE 'plpgsql'
AS $BODY$
BEGIN
	RAISE EXCEPTION 'La table LIVRE est un concept abstrait et, à ce titre, on ne peut pas insérer des valeurs';
END
$BODY$;


CREATE TRIGGER "check_livreTableAbstraite"
	BEFORE INSERT ON livre
	FOR EACH ROW
	EXECUTE PROCEDURE "mir_livreTableAbstraite"();
/* Hiérarchie Livre *****************************************************************************************/










/* Mot clé **************************************************************************************************/
CREATE TABLE MOT_CLEF (
	IDMOT SERIAL,
	MOT VARCHAR(20),
	CONSTRAINT MOT_CLEF_PK PRIMARY KEY (IDMOT)
);





CREATE TABLE CARACTERISATION(
	IDLIVRE INTEGER,
	IDMOT INTEGER,
	CONSTRAINT CARACT_PK PRIMARY KEY (IDLIVRE, IDMOT),
--	Remplacer cette contrainte par un trigger
--	CONSTRAINT CARACTTOLIVRE_FK FOREIGN KEY (IDLIVRE) REFERENCES LIVRE(IDLIVRE),
	CONSTRAINT CARACTTOMOT_CLEF_FK FOREIGN KEY (IDMOT) REFERENCES MOT_CLEF(IDMOT)
);
/* Mot clé **************************************************************************************************/










/* Exemplaire ***********************************************************************************************/
CREATE TABLE EXEMPLAIRE(
	IDEXEMPLAIRE SERIAL,
	NUMERO INTEGER,
	DATE_ACHAT DATE,
	PRIX REAL,
	CODE_PRET VARCHAR(20),
	ETAT VARCHAR(15) CHECK (ETAT IN ('BON', 'ABIME', 'EN_REPARATION')),
	IDLIVRE INTEGER,
	CONSTRAINT EXEMPLAIRE_PK PRIMARY KEY (IDEXEMPLAIRE),
--	Remplacer cette contrainte par un trigger
--	CONSTRAINT EXEMPLAIRETOLIVRE_FK FOREIGN KEY (IDLIVRE) REFERENCES LIVRE(IDLIVRE),
	CONSTRAINT CODE_PRET_DK CHECK (CODE_PRET IN ('EXCLU', 'EMPRUNTABLE', 'CONSULTABLE')) 
);





CREATE TABLE EMPRUNT(
	IDPERSONNEPHYSIQUE INTEGER,
	IDEXEMPLAIRE INTEGER,
	DATE_EMPRUNT DATE,
	DATE_RETOUR DATE,
	DATE_RETOUR_REEL DATE,
	NB_RELANCE INTEGER CHECK (NB_RELANCE IN (1, 2, 3)),
	CONSTRAINT EMPRUNT_PK PRIMARY KEY (IDPERSONNEPHYSIQUE, IDEXEMPLAIRE, DATE_EMPRUNT),
--	Remplacer cette contrainte par un trigger
--	CONSTRAINT EMPRUNTTOABONNE_FK FOREIGN KEY (IDPERSONNEPHYSIQUE) REFERENCES ABONNE(IDPERSONNEPHYSIQUE),
	CONSTRAINT EMPRUNTTOEXEMPLAIRE_FK FOREIGN KEY (IDEXEMPLAIRE) REFERENCES EXEMPLAIRE(IDEXEMPLAIRE)
);
/* Exemplaire ***********************************************************************************************/










/* Bibliothéque *********************************************************************************************/
CREATE TABLE BIBLIOTHEQUE(
	IDBIBLIOTHEQUE SERIAL,
	NOM VARCHAR(20) NOT NULL,
	CONSTRAINT BIBLIOTHEQUE_PK PRIMARY KEY (IDBIBLIOTHEQUE)
);





CREATE TABLE ABONNEMENT(
	IDPERSONNEPHYSIQUE INTEGER,
	IDBIBLIOTHEQUE INTEGER,
	NUMERO_ABONNE INTEGER,
	TARIF REAL,
	REDUCTION REAL,
	CONSTRAINT ABONNEMENT_PK PRIMARY KEY (IDPERSONNEPHYSIQUE, IDBIBLIOTHEQUE),
--	Remplacer cette contrainte par un trigger
--	CONSTRAINT ABONNEMENTTOABONNE_FK FOREIGN KEY (IDPERSONNEPHYSIQUE) REFERENCES ABONNE(IDPERSONNEPHYSIQUE),
	CONSTRAINT ABONNEMENTTOBIBLIOTHEQUE_FK FOREIGN KEY (IDBIBLIOTHEQUE) REFERENCES BIBLIOTHEQUE(IDBIBLIOTHEQUE)
);
/* Bibliothéque *********************************************************************************************/







