DROP TRIGGER If EXISTS ELECTROMENAGER_UNIQUE_TG ON ELECTROMENAGER;
DROP TRIGGER If EXISTS SECHE_LINGE_UNIQUE_TG ON SECHE_LINGE;
DROP TRIGGER If EXISTS LAVE_LINGE_UNIQUE_TG ON LAVE_LINGE;
DROP TRIGGER If EXISTS CAFETIERE_UNIQUE_TG ON CAFETIERE;
DROP FUNCTION If EXISTS UNIQUE_ID();
DROP TRIGGER If EXISTS ELECTROMENAGER_TG ON ELECTROMENAGER;
DROP FUNCTION If EXISTS ABSTRACT_ELECTROMENAGER();
DROP TABLE If EXISTS PROPRIETE;
DROP TABLE If EXISTS SECHE_LINGE;
DROP TABLE If EXISTS LAVE_LINGE;
DROP TABLE If EXISTS CAFETIERE;
DROP TABLE If EXISTS ELECTROMENAGER;
DROP TABLE If EXISTS PERSONNE;

CREATE TABLE PERSONNE(
	ID_PERSONNE SERIAL,
	NOM VARCHAR(50),
	PRENOM VARCHAR(50),
	CONSTRAINT PERSONNE_PK PRIMARY KEY (ID_PERSONNE)
);

CREATE TABLE ELECTROMENAGER(
	ID_ELECTROMENAGER SERIAL,
	MARQUE VARCHAR(50),
	REFERENCE VARCHAR(50),
    PRIX DECIMAL,
	CONSTRAINT ELECTROMENAGER_PK PRIMARY KEY (ID_ELECTROMENAGER)
);

CREATE TABLE CAFETIERE(
	PUISSANCE INTEGER,
	PRESSION INTEGER
) INHERITS(ELECTROMENAGER);

CREATE TABLE LAVE_LINGE(
	CONSOMMATION_ENERGIE INTEGER,
	CAPACITE_LAVAGE INTEGER,
    VITESSE_ESSORAGE_MAX INTEGER
) INHERITS(ELECTROMENAGER);


CREATE TABLE SECHE_LINGE(
	CONSOMMATION_ENERGIE INTEGER,
	CAPACITE_SECHAGE INTEGER,
    TYPE_SECHE_LINGE VARCHAR(50)
) INHERITS(ELECTROMENAGER);

CREATE TABLE PROPRIETE(
	ID_PERSONNE INTEGER,
	ID_ELECTROMENAGER INTEGER,
	CONSTRAINT PROPRIETE_PK PRIMARY KEY (ID_PERSONNE, ID_ELECTROMENAGER),
    CONSTRAINT PROPRIETETOPERSONNE_FK FOREIGN KEY (ID_PERSONNE) REFERENCES PERSONNE(ID_PERSONNE)
);

/*-----TRIGGER--CLASSE-ABSTRAITE-----*/

CREATE FUNCTION ABSTRACT_ELECTROMENAGER()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
RAISE EXCEPTION 'Insertion impossible sur la classe abstraite %',TG_TABLE_NAME;
END $$;


CREATE TRIGGER ELECTROMENAGER_TG
BEFORE INSERT
ON ELECTROMENAGER
FOR EACH row
EXECUTE PROCEDURE ABSTRACT_ELECTROMENAGER();

CREATE FUNCTION UNIQUE_ID()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $BODY$
DECLARE
NB_ID INTEGER;
BEGIN
	SELECT COUNT(ID_ELECTROMENAGER) FROM ELECTROMENAGER
	WHERE ID_ELECTROMENAGER = NEW.ID_ELECTROMENAGER INTO NB_ID;
	IF(NB_ID > 0)
	THEN RAISE EXCEPTION 'L''id % exsite dans la table %.%',NEW.ID_ID_ELECTROMENAGER, TG_TABLE_SCHEMA, TG_TABLE_NAME;
	END IF;
	RETURN NEW;
END $BODY$;


CREATE TRIGGER CAFETIERE_UNIQUE_TG
BEFORE UPDATE
ON CAFETIERE
FOR EACH row
EXECUTE PROCEDURE UNIQUE_ID();

CREATE TRIGGER LAVE_LINGE_UNIQUE_TG
BEFORE UPDATE
ON LAVE_LINGE
FOR EACH row
EXECUTE PROCEDURE UNIQUE_ID();

CREATE TRIGGER SECHE_LINGE_UNIQUE_TG
BEFORE UPDATE
ON SECHE_LINGE
FOR EACH row
EXECUTE PROCEDURE UNIQUE_ID();

CREATE TRIGGER ELECTROMENAGER_UNIQUE_TG
BEFORE UPDATE
ON ELECTROMENAGER
FOR EACH row
EXECUTE PROCEDURE UNIQUE_ID();